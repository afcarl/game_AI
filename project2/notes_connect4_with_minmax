Project 2: Connect4 with minmax

Idea: When it's player X's turn, he uses the minmax algorithm to evaluate all possible moves and picks the best one.

- However, building the whole tree takes way too long (several minutes)
- Therefore we restrict the depth of the tree to 4 and evaluate the different leaf nodes at level 4 to get the score of the node/possible move
- The score of a node is given by:
score = 
#(4 in row)*1000*depth
+ #(3 in row)*100
+ #(2 in row)*10
- #opponent(4 in row)*100000
- #opponent(3 in row)*100
- #opponent(2 in row)*10

=> 4 in a row count more than 3 in a row count more than 2 in a row
=> 4 in a row of the opponent count much more than our 4 in the row

Fragen: Wieso ist depth noch mit drin? was meint das "reward"?

Was ist die "difficulty", die mal als Parameter angeben kann?

- To reduce the running time/time it takes to build the tree we further use a) alpha-beta pruning and b) hashing

a) Pruning: 
- We first see at which positions we can put our man
- 

b) Hashing: For each game state/board state we have seen we calculate and save the score such that we don't have to compute it again and again